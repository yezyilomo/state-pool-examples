{"version":3,"sources":["store.js","components/Example1.js","components/Example2.js","components/Example3.js","components/Example4.js","components/Example5.js","components/Example6.js","index.js"],"names":["store","createStore","timerId","persist","saveState","key","value","isInitialSet","doStateSaving","serializedState","JSON","stringify","window","localStorage","setItem","clearTimeout","setTimeout","loadState","getItem","parse","err","removeState","removeItem","clear","setState","Example1","props","useState","name","setName","type","onChange","e","target","placeholder","class","href","height","weight","Example2","user","updateUser","Example3","default","color","setColor","onClick","remove","Example4","birthYear","setBirthYear","Example5","selector","patcher","val","setHeight","setInterval","getState","updateValue","count","Example6","ReactDOM","render","base","to","exact","path","component","document","querySelector"],"mappings":"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","file":"static/js/main.d4b46e96.chunk.js","sourcesContent":["import { createStore } from 'state-pool';\n\nconst store = createStore();\n\n\n// ===================================================\n// Use this if you want to allow store persistance in local storage\nlet timerId = null\nconst DEBOUNCE_TIME = 1000  // In milliseconds\n\nstore.persist({\n    // PERSIST_ENTIRE_STORE: true,  // Use this only if you want to persist the entire store\n    saveState: function (key, value, isInitialSet) {\n        const doStateSaving = () => {\n            try {\n                const serializedState = JSON.stringify(value);\n                window.localStorage.setItem(key, serializedState);\n            } catch {\n                // Ignore write errors\n            }\n        }\n\n        if (isInitialSet) {\n            // We don't debounce saving state since it's the initial set\n            // so it's called only once and we need our storage to be updated\n            // right away\n            doStateSaving();\n        }\n        else {\n            // Here we debounce saving state because it's the update and this function\n            // is called every time the store state changes. However, it should not\n            // be called too often because it triggers the expensive `JSON.stringify` operation.\n            clearTimeout(timerId);\n            timerId = setTimeout(doStateSaving, DEBOUNCE_TIME);\n        }\n    },\n    loadState: function (key) {\n        try {\n            const serializedState = window.localStorage.getItem(key);\n            if (serializedState === null) {\n                // No state saved\n                return undefined\n            }\n            return JSON.parse(serializedState);\n        } catch (err) {\n            // Failed to load state\n            return undefined\n        }\n    },\n    removeState: function (key) {\n        window.localStorage.removeItem(key);\n    },\n    clear: function () {\n        window.localStorage.clear();\n    }\n})\n// ===================================================\n\n\nexport default store;\n","import React from 'react';\nimport store from '../store';\n\n\nstore.setState(\"name\", \"\");\n\nfunction Example1(props) {\n    const [name, setName] = store.useState(\"name\");\n\n    const updateName = (e) => {\n        setName(e.target.value);\n    }\n\n    return (\n        <div>\n            <br /><h3>Example 1</h3><br />\n            My name is {name? name: \"___\"}  <br /><br /><br />\n            <label><b>Name</b></label>\n            <input type=\"text\" value={name} onChange={updateName} placeholder=\"Enter your name\" />\n\n\n            <div class=\"description\">\n                This is a simple example showing how to use state-pool <br/>\n                <a href=\"https://github.com/yezyilomo/state-pool-examples/blob/main/src/components/Example1.js\">\n                    View code\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default Example1;\n","import React from 'react';\nimport store from '../store';\n\n\nstore.setState(\"user\", { height: \"\", weight: \"\" });\n\nfunction Example2(props) {\n    const [name,] = store.useState(\"name\")\n    const [user, , updateUser] = store.useState(\"user\")\n\n    const updateHeight = (e) => {\n        updateUser(user => { user.height = e.target.value });\n    }\n\n    const updateWeight = (e) => {\n        updateUser(user => { user.weight = e.target.value });\n    }\n\n    return (\n        <div>\n            <br /><h3>Example 2</h3><br />\n            My name is {name? name: \"___\"}  <br /><br />\n            My height is {user.height ? `${user.height} m` : '___'},\n            and my weight is : {user.weight ? `${user.weight} kg` : '___'}  <br /><br /><br />\n\n            <label><b>Height</b></label>\n            <input type=\"text\" value={user.height} onChange={updateHeight} placeholder=\"Enter your height\" /> <br />\n            <label><b>Weight</b></label>\n            <input type=\"text\" value={user.weight} onChange={updateWeight} placeholder=\"Enter your weight\" />\n\n\n            <div class=\"description\">\n                In this example we use the updater to update a nested global state<br/>\n                <a href=\"https://github.com/yezyilomo/state-pool-examples/blob/main/src/components/Example2.js\">\n                    View code\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default Example2;\n","import React from 'react';\nimport store from '../store';\n\n\nfunction Example3(props) {\n    const [color, setColor] = store.useState(\"favColor\", { default: \"Black\" })\n\n    const updateColor = (e) => {\n        setColor(e.target.value);\n    }\n\n    const reset = (e) => {\n        store.remove(\"favColor\", () => { })\n    }\n\n    return (\n        <div>\n            <br /><h3>Example 3</h3><br />\n            My favourite color is {color} <br /><br /><br />\n            <input type=\"text\" value={color} onChange={updateColor} placeholder=\"Enter your fav color\" />\n            <button onClick={reset}>Reset</button>\n\n\n            <div class=\"description\">\n                In this example we initialize a global state dynamically\n                by using a \"default\" configuration<br/>\n                <a href=\"https://github.com/yezyilomo/state-pool-examples/blob/main/src/components/Example3.js\">\n                    View code\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default Example3;\n","import React from 'react';\nimport store from '../store';\n\n\nstore.setState(\"birthYear\", \"\", {persist: true});\n\nfunction Example4(props) {\n    const [birthYear, setBirthYear] = store.useState(\"birthYear\");\n\n    const updateBirthYear = (e) => {\n        setBirthYear(e.target.value);\n    }\n\n    return (\n        <div>\n            <br /><h3>Example 4</h3><br />\n            My birth year is {birthYear? birthYear: \"___\"}  <br /><br /><br />\n            <label><b>Birth Year</b></label>\n            <input type=\"text\" value={birthYear} onChange={updateBirthYear} placeholder=\"Enter your birth year\" />\n\n\n            <div class=\"description\">\n                In this example we're persisting year of birth to the local storage,\n                that's why even if you refresh the app, birth of year doesn't change<br/>\n                <a href=\"https://github.com/yezyilomo/state-pool-examples/blob/main/src/components/Example4.js\">\n                    View code\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default Example4;\n","import React from 'react';\nimport store from '../store';\n\n\nfunction Example5(props) {\n    const [height, setHeight] = store.useState(\"user\", {\n        selector: user => user.height,\n        patcher: (user, val) => { user.height = val }\n    });\n\n    const updateHeight = (e) => {\n        setHeight(e.target.value);\n    }\n\n    return (\n        <div>\n            <br /><h3>Example 5</h3><br />\n            My height is {height ? `${height} m` : '___'} <br /><br /><br />\n            <label><b>Height</b></label>\n            <input type=\"text\" value={height} onChange={updateHeight} placeholder=\"Enter your height\" />\n\n\n            <div class=\"description\">\n                In this example we subscribe and update nested global state(user.height)\n                by using \"selector\" and \"patcher\" configurations<br/>\n                <a href=\"https://github.com/yezyilomo/state-pool-examples/blob/main/src/components/Example5.js\">\n                    View code\n                </a>\n            </div>\n        </div>\n    );\n}\n\nexport default Example5;\n","import React from 'react';\nimport store from '../store';\n\n\nstore.setState(\"count\", 0);\n\nfunction Example6(props) {\n    const [count, ] = store.useState(\"count\");\n\n    return (\n        <div>\n            <br /><h3>Example 6</h3><br />\n            Count {count}  <br /><br /><br />\n\n\n            <div class=\"description\">\n                In this example we're updating a global state from outside a react component<br/>\n                <a href=\"https://github.com/yezyilomo/state-pool-examples/blob/main/src/components/Example6.js\">\n                    View code\n                </a>\n            </div>\n        </div>\n    );\n}\n\n// Update global state from outside a component\nsetInterval(() => {\n    store.getState(\"count\").updateValue(\n        count => count + 1\n    )\n}, 1000);\n\n\nexport default Example6;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n    HashRouter as Router, Switch, Route, Link\n} from 'react-router-dom';\n\nimport Example1 from './components/Example1'\nimport Example2 from './components/Example2';\nimport Example3 from './components/Example3';\nimport Example4 from './components/Example4';\nimport Example5 from './components/Example5';\nimport Example6 from './components/Example6';\n\n\nfunction Application(props) {\n    return (\n        <Router base=\"/\">\n            <br/> <br/> <br/> <br/>\n            <Link to=\"/example1\">Example1</Link> &nbsp; &nbsp;\n            <Link to=\"/example2\">Example2</Link> &nbsp; &nbsp;\n            <Link to=\"/example3\">Example3</Link> &nbsp; &nbsp;\n            <Link to=\"/example4\">Example4</Link> &nbsp; &nbsp;\n            <Link to=\"/example5\">Example5</Link> &nbsp; &nbsp;\n            <Link to=\"/example6\">Example6</Link>\n            <Switch>\n                <Route exact path=\"/example1\" component={Example1} />\n                <Route exact path=\"/example2\" component={Example2} />\n                <Route exact path=\"/example3\" component={Example3} />\n                <Route exact path=\"/example4\" component={Example4} />\n                <Route exact path=\"/example5\" component={Example5} />\n                <Route exact path=\"/example6\" component={Example6} />\n            </Switch>\n        </Router>\n    );\n}\n\nReactDOM.render(<Application/>, document.querySelector(\"#root\"));\n"],"sourceRoot":""}